<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.guli.user.mapper.MenuFunctionMapper">
  <resultMap id="BaseResultMap" type="com.guli.user.entity.MenuFunction">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="function_id" jdbcType="VARCHAR" property="functionId" />
    <result column="menu_id" jdbcType="VARCHAR" property="menuId" />
    <result column="function_name" jdbcType="VARCHAR" property="functionName" />
    <result column="function_type" jdbcType="TINYINT" property="functionType" />
    <result column="request_path" jdbcType="VARCHAR" property="requestPath" />
    <result column="description" jdbcType="VARCHAR" property="description" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, function_id, menu_id, function_name, function_type, request_path, description, 
    create_time, update_time
  </sql>
  <select id="selectByExample" parameterType="com.guli.user.entity.MenuFunctionExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from menu_function
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from menu_function
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from menu_function
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.guli.user.entity.MenuFunctionExample">
    delete from menu_function
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" keyColumn="id" keyProperty="id" parameterType="com.guli.user.entity.MenuFunction" useGeneratedKeys="true">
    insert into menu_function (function_id, menu_id, function_name, 
      function_type, request_path, description, 
      create_time, update_time)
    values (#{functionId,jdbcType=VARCHAR}, #{menuId,jdbcType=VARCHAR}, #{functionName,jdbcType=VARCHAR}, 
      #{functionType,jdbcType=TINYINT}, #{requestPath,jdbcType=VARCHAR}, #{description,jdbcType=VARCHAR}, 
      #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" keyColumn="id" keyProperty="id" parameterType="com.guli.user.entity.MenuFunction" useGeneratedKeys="true">
    insert into menu_function
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="functionId != null">
        function_id,
      </if>
      <if test="menuId != null">
        menu_id,
      </if>
      <if test="functionName != null">
        function_name,
      </if>
      <if test="functionType != null">
        function_type,
      </if>
      <if test="requestPath != null">
        request_path,
      </if>
      <if test="description != null">
        description,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="functionId != null">
        #{functionId,jdbcType=VARCHAR},
      </if>
      <if test="menuId != null">
        #{menuId,jdbcType=VARCHAR},
      </if>
      <if test="functionName != null">
        #{functionName,jdbcType=VARCHAR},
      </if>
      <if test="functionType != null">
        #{functionType,jdbcType=TINYINT},
      </if>
      <if test="requestPath != null">
        #{requestPath,jdbcType=VARCHAR},
      </if>
      <if test="description != null">
        #{description,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.guli.user.entity.MenuFunctionExample" resultType="java.lang.Long">
    select count(*) from menu_function
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update menu_function
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.functionId != null">
        function_id = #{record.functionId,jdbcType=VARCHAR},
      </if>
      <if test="record.menuId != null">
        menu_id = #{record.menuId,jdbcType=VARCHAR},
      </if>
      <if test="record.functionName != null">
        function_name = #{record.functionName,jdbcType=VARCHAR},
      </if>
      <if test="record.functionType != null">
        function_type = #{record.functionType,jdbcType=TINYINT},
      </if>
      <if test="record.requestPath != null">
        request_path = #{record.requestPath,jdbcType=VARCHAR},
      </if>
      <if test="record.description != null">
        description = #{record.description,jdbcType=VARCHAR},
      </if>
      <if test="record.createTime != null">
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateTime != null">
        update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update menu_function
    set id = #{record.id,jdbcType=BIGINT},
      function_id = #{record.functionId,jdbcType=VARCHAR},
      menu_id = #{record.menuId,jdbcType=VARCHAR},
      function_name = #{record.functionName,jdbcType=VARCHAR},
      function_type = #{record.functionType,jdbcType=TINYINT},
      request_path = #{record.requestPath,jdbcType=VARCHAR},
      description = #{record.description,jdbcType=VARCHAR},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.guli.user.entity.MenuFunction">
    update menu_function
    <set>
      <if test="functionId != null">
        function_id = #{functionId,jdbcType=VARCHAR},
      </if>
      <if test="menuId != null">
        menu_id = #{menuId,jdbcType=VARCHAR},
      </if>
      <if test="functionName != null">
        function_name = #{functionName,jdbcType=VARCHAR},
      </if>
      <if test="functionType != null">
        function_type = #{functionType,jdbcType=TINYINT},
      </if>
      <if test="requestPath != null">
        request_path = #{requestPath,jdbcType=VARCHAR},
      </if>
      <if test="description != null">
        description = #{description,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.guli.user.entity.MenuFunction">
    update menu_function
    set function_id = #{functionId,jdbcType=VARCHAR},
      menu_id = #{menuId,jdbcType=VARCHAR},
      function_name = #{functionName,jdbcType=VARCHAR},
      function_type = #{functionType,jdbcType=TINYINT},
      request_path = #{requestPath,jdbcType=VARCHAR},
      description = #{description,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=BIGINT}
  </update>
</mapper>